generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ComentarioScraped {
  id                     String                  @id @default(cuid())
  comentario             String
  sourceUrl              String
  scrapingId             String                  @unique
  autor                  String?
  fechaScraping          DateTime
  fechaClasificacion     DateTime?
  clasificado            Boolean                 @default(false)
  ibfScore               Float?
  resultadoIbf ResultadoIBF?
  aprobadoPorModelo Boolean? @default(false)
  privacyScore           Float?
  expressionScore        Float?
  vulnerabilidad         Float                   @default(1)
  intensidadPrivacidad   Int?
  elementoTiempo         Int?
  interesPublico         Int?
  caracterPersonaPublico Int?
  origenInformacion      Float?
  empatiaPrivacidad      Float?
  empatiaExpresion       Float?
  estado                 EstadoComentario        @default(PENDIENTE_CLASIFICACION)
  sitioWebId             String
  gravedad Gravedad?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  deletedAt              DateTime?
  fechaComentario        DateTime?
  comentarios            ComentarioClasificado[]
  sitioWeb               SitioWeb                @relation(fields: [sitioWebId], references: [id])

  @@index([sitioWebId])
  @@index([estado])
}

model ComentarioClasificado {
  id                  String            @id @default(cuid())
  clasificadorId      String
  fechaClasificacion  DateTime          @default(now())
  notas               String?
  clasificacion       CLASIFICACION?
  comentarioScrapedId String
  clasificador        User              @relation(fields: [clasificadorId], references: [id])
  comentario          ComentarioScraped @relation(fields: [comentarioScrapedId], references: [id])

  @@index([comentarioScrapedId])
  @@index([clasificadorId])
  @@index([clasificacion])
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String                  @unique
  emailVerified           DateTime?
  image                   String?
  password                String
  isActive Boolean @default(true)
  isDelete Boolean @default(false)
  rol                     Roles                   @default(MODERADOR)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  auditoriasRealizadas    Auditoria[]
  comentariosClasificados ComentarioClasificado[]
  logAuditorias           LogAuditoria[]
  UserToken               UserToken[]
  Notificacion            Notificacion[]
  UserNotifications UserNotifications[]
}

model ConfigScraping {
  id                 String    @id @default(cuid())
  sitioWebId         String    @unique
  frecuenciaScraping Int
  activo             Boolean   @default(true)
  ultimaEjecucion    DateTime?
  proximaEjecucion   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  sitioWeb           SitioWeb  @relation(fields: [sitioWebId], references: [id])
}

model SitioWeb {
  id             String              @id @default(cuid())
  url            String              @unique
  nombre         String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  comentarios    ComentarioScraped[]
  configScraping ConfigScraping?
  logScraping    LogScraping[]
}

model Reporte {
  id             String         @id @default(cuid())
  nombre         String
  descripcion    String?
  tipo           TipoReporte
  query          String
  formato        FormatoReporte @default(CSV)
  ultimoGenerado DateTime?
  proximoGenerar DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model LogScraping {
  id                    String   @id @default(cuid())
  sitioWebId            String
  fechaInicio           DateTime
  fechaFin              DateTime
  comentariosScrapeados Int
  estado                Estado
  mensajeError          String?
  createdAt             DateTime @default(now())
  sitioWeb              SitioWeb @relation(fields: [sitioWebId], references: [id])

  @@index([sitioWebId])
  @@index([estado])
}

model LogClasificacionIA {
  id             String   @id @default(cuid())
  fecha          DateTime @default(now())
  modelo_version String
  duracion       Int
  estado         Estado
  mensaje_error  String?

  @@index([estado])
}

model LogAuditoria {
  id        String   @id @default(cuid())
  fecha     DateTime @default(now())
  usuarioId String
  accion    String
  entidad   String
  entidadId String
  detalles  Json
  usuario   User     @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([entidad, entidadId])
}

model Auditoria {
  id                 String          @id @default(cuid())
  fecha              DateTime        @default(now())
  usuarioId          String
  tipoAccion         TipoAccion
  motivoAccion       MotivoAccion?
  entidad            String
  entidadId          String
  detalles           String?
  cambios            Cambio[]
  usuario            User            @relation(fields: [usuarioId], references: [id])

  createdAt      DateTime       @default(now())

  @@index([usuarioId])
  @@index([tipoAccion])
  @@index([entidad, entidadId])
}


model Cambio {
  id            String      @id @default(cuid())
  auditoriaId   String
  campo         String
  valorAnterior String?
  valorNuevo    String?
  auditoria     Auditoria   @relation(fields: [auditoriaId], references: [id])

  createdAt      DateTime       @default(now())

  @@index([auditoriaId])
  @@index([campo])
}

model UserToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  tipo      TipoToken
  createdAt DateTime  @default(now())
  expireAt  DateTime
  User      User      @relation(fields: [userId], references: [id])

  @@index([expireAt])
  @@index([tipo])
  @@unique([userId,tipo],name: "userId_tipo_unique")
}


model Notificacion {
  id                String   @id @default(cuid())
  usuarioId         String
  tipo_notificacion String
  contenido         String
  estado            String // la idea es que este en (no_leida), (leida) o (oculta)
  createdAt         DateTime @default(now())
  usuario           User     @relation(fields: [usuarioId], references: [id])
}


model Notification {
  id String @id @default(cuid())
  message String
  type TipoNotificacion
  tipoNotificacionApp TipoNotificacionApp
  createdAt         DateTime @default(now())

  userNotifications UserNotifications[]
}

model UserNotifications{
  id String @id @default(cuid())
  notificationId String
  userId String
  isRead Boolean
  
  createdAt         DateTime @default(now())

  notification Notification @relation(fields:[notificationId], references:[id])
  user User @relation(fields: [userId], references: [id])

  @@index([notificationId])  
  @@index([userId]) 
}

enum TipoAccion {
  DESCARGAR_COMENTARIOS
  CLASIFICAR_MANUALMENTE
  EDITAR_COMENTARIO_CLASIFICADO
  ELIMINAR_COMENTARIO_CLASIFICADO
  ELIMINAR_COMENTARIO_RECOLECTADO
  CREAR_USUARIO
  DESACTIVAR_USUARIO
}


enum TipoNotificacion{
  GLOBAL
  INDIVIDUAL
}


enum TipoNotificacionApp{
  INSERT_COMENTARIOS
  INFORME
  URGENTE
  CAMBIO_CONFIG
  RESUMEN
}

enum MotivoAccion {
  REVISION
  SE_ENCONTRO_UN_ERROR
  CLASIFICACION_PREVIA_INCORRECTA
  RECLASIFICACION
  OTRO
}

enum Estado {
  EXITOSO
  FALLIDO
}

enum TipoReporte {
  DIARIO
  SEMANAL
  MENSUAL
  PERSONALIZADO
}

enum FormatoReporte {
  CSV
  EXCEL
}

enum Gravedad {
  LEVE
  MODERADA
  GRAVE
}

enum Sentimiento {
  POSITIVO
  NEUTRO
  NEGATIVO
}

enum EstadoComentario {
  PENDIENTE_CLASIFICACION
  CLASIFICADO
}

enum Roles {
  ADMIN
  MODERADOR
}

enum TipoToken {
  REFRESH
  ACCESS
  RESET_PASSWORD
  VERIFICATION
}

enum CLASIFICACION {
  AUTOMATICA
  MANUAL
}

enum ResultadoIBF {
  PRIVACIDAD_PREDOMINA
  LIBERTAD_EXPRESION_PREDOMINA
  EQUILIBRIO_ENTRE_DERECHOS
}
